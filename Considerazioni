Data l'equazione di B&S Jump Diffusion

...

è possibile tramite il cambio di variabile Se^y=z, giungere alla seguente equazione:

\frac{\partial C}{\partial t}+sigma^2*S^2\frac{\partial^2 C}{\partial S^2}+rS\frac{\partial C}{\partial S}-rC+\int_{-\infty}{\infty}\frac{C(t,z)}{z}k(ln(z/S))dz-\lambda C(t,S)-\alpha S \frac{\partial C}{\partial S}=0

Osserviamo che, ponendo S_i=\{Smin, ..., Smax\}, l'integrale diventa:

J(S_i)=\int_Smin^Smax \frac{C(t,z)}{z}k(ln(z/S_i))dz.

Posto N^Q pari al numero di celle totali della griglia,

J(S_i)=\sum_{k=0}{N^Q}C_k,

dove

C_k=\sum_{pesi_j}w_jC(t,z_j)k(ln(z_j/S_i)).

In 2d ci sarebbe il grosso di problema di dover integrare sulle due rette passanti per un nodo, ovvero i punti di quadratura dovrebbero stare sulle facce delle celle.

L'idea di calcolare tutti i valori di u(t,x_i+z_j) per riutilizzarne alcuni presuppone che per esempio x_1+z_2 coincida con x_2+z_1, o una relazione simile, il che richiederebbe delle griglie (di integrazione e mesh) allineate in qualche modo. E questo cambierebbe il tipo di integrazione usato. Dovremmo infatti tornare ai pesi dei trapezi: i nodi di Gauss infatti sono dentro la cella, e non sul bordo, mentre i nodi di Laguerre e Hermite vengono precalcolati da una libreria esterna e non si può allineare la mesh a questi nodi.
