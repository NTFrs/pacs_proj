/*
 A little plan about a possible organization of classes
 */

enum Model {
	Black_Scholes;
	Kou;
	Merton;
};

class Parameters<dim>{
private:

	double K;
	std::vector<double> S0;
	std::vector<double> Sigma;
	double T;
	double r;
	double rho;
	
	Model model;
	
	// Kou
	std::vector<double> p;
	std::vector<double> lambda;
	std::vector<double> lambda_piu;
	std::vector<double> lamnda_meno;
	
	// Merton
	std::vector<double> C;
	std::vector<double> mu;
	std::vector<double> delta;
	
public:
	
	Parameters<dim>(std::vector<double> S0, double K, double r,
			std::vector<double> Sigma, double rho, double T){
			...
			model=Black_Scholes;
			}
			
	Parameters<dim>(... // Kou parameters
			){
			model=Kou;
			}
	
	Parameters<dim>(... // Merton parameters
			){
			model=Merton;
			}
	// stessi costruttori specializzati in 1d, con i double
	...
	// calibrazione, costruttori e operatori di copia
};

class Option<dim>{
	...
}

class EuropeanOption<dim>: public Option<dim>{
public:
	EuropeanOption(Parameters<dim> &, Model &);
	compute_call_price();
	compute_put_price(); // put call parity per B&S?
};

class AmericanOption<dim>: public Option<dim>{
public:
	AmericanOption(Parameters<dim> &, Model &);
	compute_put_price();
};

// quante sono le barriera??
class Barrier<dim>: public Option<dim>{
public:						// in più dimensioni, le barriere per ogni dimensione
	Barrier(Parameters<dim> &, bool IN, std::vector<double> & const D, std::vector<double> & const U, Model &);
	Barrier(Parameters<1> &, double D, double U, Model &);
	// poi basta prendere
	// Smin[i]=max(D[i], Smin[i]);
	// Smax[i]=min(U[i], Smax[i]);
	
};

class Asian: public Option<1> {
	// qui si riscrivono tutte le funzioni di Option perché è tutto diverso
}

